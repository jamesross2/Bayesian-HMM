import collections
from _typeshed import Incomplete

class State:
    ___slots__: Incomplete
    value: Incomplete
    def __init__(self, value: collections.abc.Hashable) -> None: ...
    @property
    def special(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...

class SpecialState(State):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...

class StartingState(SpecialState):
    def __init__(self) -> None: ...

class AggregateState(SpecialState):
    def __init__(self) -> None: ...

class MissingState(SpecialState):
    def __init__(self) -> None: ...
