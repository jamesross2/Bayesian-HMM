import typing
from . import variable as variable
from _typeshed import Incomplete

class Hyperparameter(variable.Variable):
    prior: Incomplete
    prior_log_likelihood: Incomplete
    value: Incomplete
    def __init__(self, prior: typing.Callable[[], typing.Union[float, int]], log_likelihood: typing.Callable[[typing.Union[float, int]], float]) -> None: ...
    def log_likelihood(self) -> float: ...
    def resample(self, posterior_log_likelihood: typing.Optional[typing.Callable[[typing.Union[float, int]], float]] = ..., force: bool = ...) -> typing.Union[float, int]: ...

class Gamma(Hyperparameter):
    def __init__(self, shape: float = ..., scale: float = ...): ...

class Beta(Hyperparameter):
    def __init__(self, shape: float = ..., scale: float = ...): ...

class Dummy(Hyperparameter):
    def __init__(self, value: typing.Union[int, float] = ...): ...
    def resample(self, posterior_log_likelihood: typing.Optional[typing.Callable[[typing.Union[float, int]], float]] = ..., force: bool = ...) -> typing.Union[float, int]: ...
