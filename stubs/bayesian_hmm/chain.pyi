import numpy
import typing
from . import variables as variables
from _typeshed import Incomplete

Numeric: Incomplete
DictStrNum: Incomplete
InitDict = DictStrNum
DictStrDictStrNum: Incomplete
NestedInitDict = DictStrDictStrNum

class Chain:
    emission_sequence: Incomplete
    latent_sequence: Incomplete
    T: Incomplete
    def __init__(self, sequence: typing.Sequence[variables.State]) -> None: ...
    def __len__(self) -> int: ...
    @property
    def initialised_flag(self) -> bool: ...
    @initialised_flag.setter
    def initialised_flag(self, value: bool) -> None: ...
    def to_array(self) -> numpy.array: ...
    def initialise(self, states: typing.Set[variables.State]) -> None: ...
    def log_likelihood(self, emission_probabilities: NestedInitDict, transition_probabilities: NestedInitDict) -> float: ...
    def resample(self, states: typing.Set[variables.State], emission_probabilities: NestedInitDict, transition_probabilities: NestedInitDict) -> None: ...

def resample_latent_sequence(sequences: typing.Tuple[typing.List[variables.State], typing.List[variables.State]], states: typing.Set[variables.State], emission_probabilities: NestedInitDict, transition_probabilities: NestedInitDict) -> typing.List[variables.State]: ...
